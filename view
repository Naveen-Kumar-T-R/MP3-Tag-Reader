/* Name : NAVEEN KUMAR T R
   Date : 26/09/2025*/
   
#include<stdio.h>
#include<string.h>
#include "view.h"

// Function to read an MP3 file, validate it, and display tag data.
void read_validate_view_arg(char **argv)
{
    // Open the file provided as the 3rd argument (argv[2]) in read mode.
    FILE *fptr = fopen(argv[2], "r");
    // Check if the file failed to open.
    if(fptr == NULL)
    {
        printf("Error : Could not open the file.\n");
        exit(1);// Exit the program with error.
    }

    char sig[4];
    fread(sig, 1, 3, fptr);// Read the first 3 bytes of the file to check for "ID3" header.
    sig[3] = '\0';

    // Compare the header to "ID3" to verify it's an MP3 file.
    if(strcmp(sig, "ID3") == 0)
    {
        // Display a header for the viewer
        printf("mp3 Tag reader & Editor: \n");
        printf("-----------------------------------------\n");
        printf("Version ID: 2.3\n");

        // Move file pointer to byte 10
        fseek(fptr, 10, SEEK_SET);//skipping header.

        // Loop to read and display 6 frames.
        for(int i = 0; i < 6 ; i++)
        {
            char tag[4];
            fread(tag, 1, 4, fptr);// Read 4 bytes which represent the frame ID (e.g., TIT2, TPE1).
            // printf("%s  :\t", tag);
            print(tag);//function call to display the label for the tag.

            int size=0;
            fread(&size, 1, 4, fptr);// Read the next 4 bytes which represent the size of the frame's data.

            // Convert from big endian to little endian
            char *ch = (char*)&size;

            for(int i = 0; i < sizeof(int)/2; i++)
            {
                char temp = *(ch+i);
                *(ch+i) = *(ch +4-i-1);
                *(ch+4-i-1) = temp;
            }

            fseek(fptr, 3, SEEK_CUR); // Skip 3 bytes for flags (not used).
            // Read the actual data using the calculated size
            char data[size];
            fread(data, 1, size-1, fptr);// Read one byte less to allow for null termination.
            data[size-1] = '\0'; // Null-terminate the data string.

            printf("%s\n", data);//print the data.
        }

    }
    else
    {
         // If the file doesn't start with ID3, it's not a valid MP3 file.
        printf("Only mp3 file is accepted.\n");

        return ;
    }

}

// Function to print a readable label for each known tag.
void print(char *tag)
{
    // Check for each possible tag and print its corresponding label.
    if(strcmp(tag, "TIT2") == 0)
    {
        printf("Title   : ");
    }
    else if(strcmp(tag, "TPE1") == 0)
    {
        printf("Artist  : ");
    }
    else if(strcmp(tag, "TALB") == 0)
    {
        printf("Album   : ");
    }
    else if(strcmp(tag, "TYER") == 0)
    {
        printf("Year    : ");
    }
    else if(strcmp(tag, "TCON") == 0)
    {
        printf("Content : ");
    }
    else if(strcmp(tag, "COMM") == 0)
    {
        printf("Genre   : ");
    }
    else
    {
        // Exit if tag is not recognized.
        exit(1);
    }

}
